# -*- coding: utf-8 -*-
"""IBM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10736m2IzpwXR8te_ALYPSeHOn6UIYo_8
"""

from google.colab import files
upload=files.upload()
import matplotlib.pyplot as plt

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
from tensorflow import keras
import seaborn as sns
import os
from datetime import datetime

import warnings
warnings.filterwarnings("ignore")
import pandas as pd
import seaborn as sns
msft=pd.read_csv(r"MSFT.csv")
msft.head()

from sklearn.metrics import mean_squared_error

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

msft.info()

import seaborn as sns
plt.figure(figsize=(17,9))
plt.title('Flowchart  of Msft data')
sns.scatterplot(msft['Volume'],s=50)

plt.figure(figsize=(17,9))
plt.title('Flowchart of Msft data')
sns.scatterplot(msft['Close'],s=50)

print(msft.expanding())
msft.abs

import matplotlib.pyplot as plt
import seaborn as sns
sns.pairplot(data=msft,hue="Volume",height=4)

import pandas as pd

# Load your CSV data into a DataFrame
msft = pd.read_csv("MSFT.csv")  # Replace "your_file.csv" with your CSV file's path

# Convert the 'Date' column to a datetime object if it's not already
msft['Date'] = pd.to_datetime(msft['Date'])

# Find the start date (minimum date) and end date (maximum date)
start_date = msft['Date'].min()
end_date = msft['Date'].max()

print(f"Start Date: {start_date}")
print(f"End Date: {end_date}")

msft = pd.read_csv("MSFT.csv")
print(msft[['Date','Open', 'Close','High','Low','Adj Close','Volume']])

print(msft['Volume'])

import pandas as pd

msft = pd.read_csv("MSFT.csv")

# Check for missing values and count them in each column
missing_values = msft.isna().sum()

# Display the count of missing values in each column
print(missing_values)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load your dataset (replace "your_data.csv" with the actual path)
msft = pd.read_csv("MSFT.csv")

# Ensure the 'Date' column is in datetime format
msft['Date'] = pd.to_datetime(msft['Date'])

# Set 'Date' as the index for time series analysis (optional but recommended)
msft.set_index('Date', inplace=True)

# Define your target variable (what you want to predict, e.g., 'Close' prices)
target_column = 'Close'
y = msft[target_column]

# Define features (you can choose relevant columns as features)
# For example, let's use 'Open', 'High', 'Low', 'Volume' as features
feature_columns = ['Open', 'High', 'Low', 'Volume']
X = msft[feature_columns]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train your regression model (e.g., Linear Regression)
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Evaluate the model using Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Visualize the actual vs. predicted values
plt.figure(figsize=(20, 6))
plt.plot(y_test.index, y_test, label='Actual', color='blue')

plt.legend()
plt.title('Actual vs. Predicted Close Prices')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.show()

#technical indicators
import pandas as pd

# Load your dataset (replace "your_data.csv" with the actual path)
msft = pd.read_csv("MSFT.csv")

# Ensure the 'Date' column is in datetime format
msft['Date'] = pd.to_datetime(msft['Date'])

# Set 'Date' as the index for time series analysis (optional but recommended)
msft.set_index('Date', inplace=True)

# Calculate Simple Moving Average (SMA)
sma_period = 14  # Choose the period for SMA
msft['SMA'] = msft['Close'].rolling(window=sma_period).mean()

# Display the DataFrame with the calculated SMA
print(msft[['Close', 'SMA']])

import pandas as pd

# Load your dataset (replace "your_data.csv" with the actual path)
msft = pd.read_csv("MSFT.csv")

# Ensure the 'Date' column is in datetime format
msft['Date'] = pd.to_datetime(msft['Date'])

# Sort the DataFrame by date (if not already sorted)
msft.sort_values(by='Date', inplace=True)

# Set 'Date' as the index for time series analysis (optional but recommended)
msft.set_index('Date', inplace=True)

# Define the number of lag periods you want to create
num_lags = 3  # You can adjust this number based on your analysis

# Create lagged variables for a specific feature (e.g., 'Close' prices)
for i in range(1, num_lags + 1):
    msft[f'Close_Lag_{i}'] = msft['Close'].shift(i)

# Drop rows with missing values in the lagged variables
msft.dropna(inplace=True)

# Display the DataFrame with lagged variables
print(msft[['Close'] + [f'Close_Lag_{i}' for i in range(1, num_lags + 1)]])

import statsmodels.api as sm

# Fit an ARIMA model
model = sm.tsa.ARIMA(train_data, order=(p, d, q))  # Set appropriate p, d, and q values
results = model.fit()

# Make forecasts
forecast = results.forecast(steps=num_steps)

# Display the first few rows of the DataFrame
print(msft.head())

# Check for missing values
print(msft.isnull().sum())

# Summary statistics
print(msft.describe())

import matplotlib.pyplot as plt
import seaborn as sns

# Plot the closing prices over time
plt.figure(figsize=(12, 6))
msft['Date'] = pd.to_datetime(msft['Date'])
plt.plot(msft['Date'], msft['Close'], label='Close Price', color='blue')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.title('Microsoft Stock Price Over Time')
plt.legend()
plt.show()

# Plot a histogram of daily trading volume
plt.figure(figsize=(10, 6))
sns.histplot(msft['Volume'], bins=50, kde=True, color='green')
plt.xlabel('Volume')
plt.ylabel('Frequency')
plt.title('Distribution of Daily Trading Volume')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load your dataset (replace "your_data.csv" with the actual path)
msft = pd.read_csv("MSFT.csv")

# Ensure the 'Date' column is in datetime format
msft['Date'] = pd.to_datetime(msft['Date'])

# Plot the closing prices over time
plt.figure(figsize=(12, 6))
plt.plot(msft['Date'], msft['Open'], label='Close Price', color='blue')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.title('Microsoft Stock Price Over Time')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load your dataset (replace "your_data.csv" with the actual path)
msft = pd.read_csv("MSFT.csv")

# Ensure the 'Date' column is in datetime format
msft['Date'] = pd.to_datetime(msft['Date'])

# Plot the closing prices over time
plt.figure(figsize=(12, 6))
plt.plot(msft['Date'], msft['Volume'], label='Volume', color='Green')
plt.xlabel('Date')
plt.ylabel('Volume')
plt.title('Microsoft Stock Price Over Time')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
sns.histplot(msft['Volume'], bins=50, kde=True, color='green')
plt.xlabel('Volume')
plt.ylabel('Frequency')
plt.title('Distribution of Daily Trading Volume')
plt.show()